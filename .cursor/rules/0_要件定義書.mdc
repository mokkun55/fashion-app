---
alwaysApply: true
---

# アプリケーション要件定義書（たたき台）

## 1\. プロジェクト概要

### 1.1. アプリケーション名（仮）

fashion-app

### 1.2. 目的

多忙な朝の時間において、服装選びにかかる思考コストと時間を削減する。
ユーザーのクローゼット情報、当日の気温、設定された予定に基づき、最適なコーディネートを提案する。

### 1.3. ターゲットユーザー

20〜25 歳の若者世代。

## 2\. 機能要件

### 2.1. 機能一覧

| 大項目              | 小項目                  | 概要                                                                |
| :------------------ | :---------------------- | :------------------------------------------------------------------ |
| 1. クローゼット管理 | 1.1. 服の登録           | ユーザーが手持ちの服を写真付きで登録する。                          |
|                     | 1.2. 服の一覧/編集/削除 | 登録した服の情報を管理する。                                        |
| 2. 予定管理         | 2.1. 当日の予定設定     | その日の予定を 3 つの選択肢から設定する。                           |
| 3. 服装提案         | 3.1. コーデ提案         | 予定、気温、クローゼット情報に基づき、コーデを 3 パターン提案する。 |
| 4. 着回し管理       | 4.1. 着用記録           | 提案された（または選んだ）服を「今日着た」と記録する。              |

### 2.2. 想定される主要画面

- **ホーム画面（提案画面）**: メイン画面。当日の予定設定、服装の提案結果を表示する。
- **クローゼット一覧画面**: 登録済みの服を一覧表示する。
- **服登録/編集画面**: 服の情報を入力・編集するフォーム。

### 2.3 使用技術

- Python + Flask (Web フレームワーク)
- Jinja2 (テンプレートエンジン)
- Tailwind CSS (スタイリング)
- SQLite (データベース)

---

## 3\. 各機能の詳細仕様

### 3.1. クローゼット管理機能 (服の登録・管理)

ユーザーが自身の服をアプリに登録するための機能。

#### 3.1.1. データモデル（服アイテム）

「服」は以下の情報を持つ。

| 項目名         | 型              | 必須 | 詳細                                                                                                                                                                 |
| :------------- | :-------------- | :--- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| ID             | UUID/Serial     | ◯    | 一意の識別子                                                                                                                                                         |
| 写真           | Image (URL)     | ◯    | ユーザーがアップロードした服の写真                                                                                                                                   |
| 種類（大分類） | String          | ◯    | `トップス` / `ボトムス` のいずれか                                                                                                                                   |
| 種類（中分類） | String          | ◯    | **大分類**に応じて以下の選択肢を提示する。<br>・トップス： `半袖` / `長袖・薄手` / `長袖・厚手`<br>・ボトムス： `短め` / `長め`                                      |
| 色             | String (Array?) | ◯    | ユーザーが手動で選択・入力する。（例：黒, 白, 赤...）<br>※色検出機能はスコープ外                                                                                     |
| 用途ラベル     | String (Array)  | ◯    | 以下の選択肢からユーザーが**複数選択可能**とする。<br>・`デート` (プライベート/おしゃれ)<br>・`企業` (フォーマル/オフィスカジュアル)<br>・`大学` (カジュアル/普段着) |
| 最終着用日     | Date            | -    | 「4.1. 着用記録」機能で使用する。未着用時は `NULL`。                                                                                                                 |

---

### 3.2. 予定管理機能

ホーム画面（提案画面）で、その日の服装の TPO を決定する機能。

- ユーザーは、当日の予定を以下の選択肢から 1 つ選択する。
  - `デート`
  - `企業`
  - `大学`
- この選択肢は、服の「用途ラベル」と連動する。
- デフォルトは「大学（カジュアル）」とする。

---

### 3.3. 服装提案機能

本アプリの中核機能。設定された「予定」と「当日の気温」に基づき、最適なコーデを提案する。

#### 3.3.1. 提案ロジック（アルゴリズム）

提案は、以下のステップで絞り込みを行い、最終候補を生成する。

**[Step 1] 外部 API による情報取得**

- ユーザーの地域（※地域設定機能が別途必要）に基づき、天気 API を呼び出し、**現在の気温**（または当日の予想最高/最低気温）を取得する。

**[Step 2] 「予定」による絞り込み**

- 「3.2. 予定管理機能」でユーザーが選択した予定（例：`大学`）を取得する。
- クローゼット内の服のうち、該当する「用途ラベル（例：`大学`）」を持つ服（トップス、ボトムス）のみを抽出する。

**[Step 3] 「気温」による絞り込み**

- Step 1 で取得した気温に基づき、Step 2 の候補をさらに絞り込む。

| 気温 ( $T$ )                                     | 提案する服の種類                           | 補足メッセージ                           |
| :----------------------------------------------- | :----------------------------------------- | :--------------------------------------- |
| $T \geq 28^{\circ}\text{C}$                      | トップス: `半袖`<br>ボトムス: `短め`       |                                          |
| $20^{\circ}\text{C} \leq T < 28^{\circ}\text{C}$ | トップス: `長袖・薄手`<br>ボトムス: `長め` |                                          |
| $15^{\circ}\text{C} \leq T < 20^{\circ}\text{C}$ | トップス: `長袖・厚手`<br>ボトムス: `長め` |                                          |
| $T < 15^{\circ}\text{C}$                         | トップス: `長袖・厚手`<br>ボトムス: `長め` | 「アウターを羽織ることをおすすめします」 |

**[Step 4] 「着回し」による絞り込み**

- Step 3 の候補のうち、「最終着用日」が昨日（または直近 2 日以内など、定義要）の服を提案候補から除外する。

**[Step 5] 提案セットの生成**

- Step 4 で残った「トップス」と「ボトムス」をランダムに組み合わせてコーディネートセットを作成する。
- このセットを**3 パターン**生成し、画面に表示する。
- （※候補が足りず 3 パターン作れない場合の考慮が別途必要）

---

### 3.4. 着回し記録機能

提案のローテーション（マンネリ化防止）を実現するための機能。

- 「3.3. 服装提案機能」で提案されたコーデ、またはユーザーが最終的に選んだコーデに対して、「これを着た」ボタンを設置する。
- ボタンが押されると、該当する「トップス」と「ボトムス」の「最終着用日」を現在日時に更新する。
- このデータは「3.3.1. [Step 4]」で使用される。

## 4\. 非機能要件

### 4.1. 外部 API

- **天気・気温 API**: 当日の気温情報を取得するために必須。（例：OpenWeatherMap API など）
  - `requests` ライブラリを使用して API 呼び出しを行う

### 4.2. データストレージ

- **SQLite**: ユーザーが登録した服のデータ（写真、属性情報）は、外部のサーバー（クラウド）には送信・保存せず、ローカルの SQLite データベースに保存する。
- **画像保存**: アップロードされた写真はローカルファイルシステム（`static/uploads/`）に保存し、DB にはファイルパスを記録する。または、SQLite の BLOB 型として直接保存することも可能。
- **データベース管理**: SQLAlchemy を使用して ORM パターンでデータベース操作を行う。

## 5\. スコープ外（将来的な拡張）

- アウター、靴、バッグなどのアイテム登録
- 写真からの自動色検出
- 天気（雨、雪）に応じた提案（例：雨の日は特定の靴を避ける）
- 外部カレンダー（Google カレンダー等）との連携
- コーデの「お気に入り」登録機能
